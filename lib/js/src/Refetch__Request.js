// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Fetch            = require("bs-fetch/lib/js/src/Fetch.js");
var Rebase           = require("reason-rebase/lib/js/src/rebase.js");
var Refetch__Mime    = require("./Refetch__Mime.js");
var Refetch__Headers = require("./Refetch__Headers.js");

function make(method_, $staropt$star, $staropt$star$1, body, url) {
  var queryParams = $staropt$star ? $staropt$star[0] : /* [] */0;
  var headers = $staropt$star$1 ? $staropt$star$1[0] : /* [] */0;
  return /* record */[
          /* url */url,
          /* method */method_,
          /* queryParams */queryParams,
          /* headers */headers,
          /* body */body
        ];
}

function param(key, value, request) {
  return /* record */[
          /* url */request[/* url */0],
          /* method */request[/* method */1],
          /* queryParams : :: */[
            /* tuple */[
              key,
              value
            ],
            request[/* queryParams */2]
          ],
          /* headers */request[/* headers */3],
          /* body */request[/* body */4]
        ];
}

function header(header$1, request) {
  return /* record */[
          /* url */request[/* url */0],
          /* method */request[/* method */1],
          /* queryParams */request[/* queryParams */2],
          /* headers : :: */[
            header$1,
            request[/* headers */3]
          ],
          /* body */request[/* body */4]
        ];
}

function payload(payload$1, request) {
  if (payload$1[0] >= 826371656) {
    var init = header(/* `ContentType */[
          246273139,
          Refetch__Mime.json
        ], request);
    return /* record */[
            /* url */init[/* url */0],
            /* method */init[/* method */1],
            /* queryParams */init[/* queryParams */2],
            /* headers */init[/* headers */3],
            /* body : Some */[payload$1]
          ];
  } else {
    return /* record */[
            /* url */request[/* url */0],
            /* method */request[/* method */1],
            /* queryParams */request[/* queryParams */2],
            /* headers */request[/* headers */3],
            /* body : Some */[payload$1]
          ];
  }
}

function _encodeMethod(param) {
  if (typeof param === "number") {
    if (param >= 357830602) {
      if (param !== 492530731) {
        if (param >= 891112544) {
          if (param >= 994393768) {
            return /* Patch */8;
          } else {
            return /* Post */2;
          }
        } else if (param >= 801894688) {
          return /* Head */1;
        } else {
          return /* Connect */5;
        }
      } else {
        return /* Delete */4;
      }
    } else if (param >= 3997359) {
      if (param >= 336447077) {
        return /* Trace */7;
      } else {
        return /* Put */3;
      }
    } else if (param >= 3546230) {
      return /* Get */0;
    } else {
      return /* Options */6;
    }
  } else {
    return /* Other */[param[1]];
  }
}

function _buildUrl(url, params) {
  var encodeParam = function (param) {
    return encodeURIComponent(param[0]) + "=" + encodeURIComponent(param[1]);
  };
  var joinParams = function (param) {
    if (param) {
      return Rebase.List[/* reduce */0]((function (acc, param) {
                    return "" + (String(acc) + ("&" + (String(param) + "")));
                  }), param[0], param[1]);
    } else {
      return "";
    }
  };
  var params$1 = joinParams(Rebase.List[/* map */2](encodeParam, params));
  return "" + (String(url) + ("?" + (String(params$1) + "")));
}

function _toFetchRequest(request) {
  return new Request(_buildUrl(request[/* url */0], request[/* queryParams */2]), Fetch.RequestInit[/* make */0](/* Some */[_encodeMethod(request[/* method */1])], /* Some */[Refetch__Headers._encode(request[/* headers */3])], Rebase.Option[/* map */2]((function (param) {
                          if (param[0] >= 826371656) {
                            return JSON.stringify(param[1]);
                          } else {
                            return param[1];
                          }
                        }), request[/* body */4]), /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* () */0));
}

var Body = 0;

var Headers = 0;

var Mime = 0;

exports.Body            = Body;
exports.Headers         = Headers;
exports.Mime            = Mime;
exports.make            = make;
exports.param           = param;
exports.header          = header;
exports.payload         = payload;
exports._encodeMethod   = _encodeMethod;
exports._buildUrl       = _buildUrl;
exports._toFetchRequest = _toFetchRequest;
/* Refetch__Headers Not a pure module */
